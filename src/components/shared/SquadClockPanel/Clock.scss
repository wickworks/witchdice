@import '../../../fonts';

@keyframes flashSegmentIn {
  0% { filter: brightness(150%); }
  100% { filter: brightness(100%); }
}

.Clock {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;

  height: fit-content;
  width: 164px;
  margin: 0 18px;
  border-radius: 6px;
  background-color: $parchment_dark;

  .controls-container {
    width: 164px;
    height: 164px;

    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 1fr 1fr;

    &.disabled {
      opacity: .3;
      pointer-events: none;
    }

    button.center-peg {
      @include text_monospace;
      grid-column: 1 / span 2;
      grid-row: 1 / span 2;
      align-self: center;
      justify-self: center;

      border-radius: 100%;
      background-color: $rust_dark;
      border: 4px solid $rust_dark;

      width: 30%;
      height: 30%;
      z-index: 5;

      display: grid;
      justify-content: center;
      align-items: center;

      color: white;
      font-weight: bold;
      font-size: 20px;

      &:hover:not(:disabled) {
        background-color: $rust;
        border-color: $rust_light;

        .number { opacity: 0; }
        .asset { opacity: 0; }
        .hover-only.asset { opacity: 1; }
      }

      .number {
        grid-column: 1;
        grid-row: 1;

        &.hidden { opacity: 0; }
      }

      .asset {
        grid-column: 1;
        grid-row: 1;
        width: 24px;
        height: 24px;
        filter: invert(100%);

        &:hover { opacity: 0; }
        &.hover-only { opacity: 0; }
      }
    }

    .segments-container {
      grid-column: 1 / span 2;
      grid-row: 1 / span 2;
      position: relative;

      margin: 16px;

      border-radius: 100%;
      background-color: $rust_dark;


      .Segment {
        display: block;
        position: absolute;
        top: 6px; left: 6px; bottom: 6px; right: 6px;
        width: 91%;
        height: 91%;
        border-radius: 100%;
        background-color: $grey_mid;

        &:hover { background-color: $grey_mid_light; }

        &.filled {
          background-color: $rust;
          animation: .2s ease-in 0s 1 flashSegmentIn;

          &:hover { background-color: $rust_light; }
        }
      }


      // Lots of bad trigonometry magic numbers, here. A little bad math then manual tweaking.
      &.max-size-4 .Segment {
        clip-path: polygon(50% 0, 100% 0, 100% 50%, 50% 50%);
        --explode-x: 2px;
        --explode-y: -2px;

        &:nth-child(1) { transform:rotate(0deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(2) { transform:rotate(90deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(3) { transform:rotate(180deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(4) { transform:rotate(270deg) translate(var(--explode-x),var(--explode-y)); }
      }

      &.max-size-6 .Segment {
        clip-path: polygon(50% 0, 136.6% 0, 50% 50%, 50% 50%);
        --explode-x: 1.73px;
        --explode-y: -3.73px;

        &:nth-child(1) { transform:rotate(0deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(2) { transform:rotate(60deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(3) { transform:rotate(120deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(4) { transform:rotate(180deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(5) { transform:rotate(240deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(6) { transform:rotate(300deg) translate(var(--explode-x),var(--explode-y)); }
      }

      &.max-size-8 .Segment {
        clip-path: polygon(50% 0, 100% 0, 50% 50%, 50% 50%);
        --explode-x: 1.41px;
        --explode-y: -3.41px;

        &:nth-child(1) { transform:rotate(0deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(2) { transform:rotate(45deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(3) { transform:rotate(90deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(4) { transform:rotate(135deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(5) { transform:rotate(180deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(6) { transform:rotate(225deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(7) { transform:rotate(270deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(8) { transform:rotate(315deg) translate(var(--explode-x),var(--explode-y)); }
      }

      &.max-size-10 .Segment {
        clip-path: polygon(50% 0, 86.32% 0, 50% 50%, 50% 50%);
        --explode-x: 1.61px;
        --explode-y: -3.61px;

        &:nth-child(1) { transform:rotate(0deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(2) { transform:rotate(36deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(3) { transform:rotate(72deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(4) { transform:rotate(108deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(5) { transform:rotate(144deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(6) { transform:rotate(180deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(7) { transform:rotate(216deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(8) { transform:rotate(252deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(9) { transform:rotate(288deg) translate(var(--explode-x),var(--explode-y)); }
        &:nth-child(10) { transform:rotate(324deg) translate(var(--explode-x),var(--explode-y)); }
      }
    }

  }

  input.user-input {
    width: 100%;
    box-sizing: border-box;
    padding: 4px;

    text-align: center;
    font-style: normal;
    font-weight: bold;
    font-size: 18px;

    background-color: $parchment_dark;
    color: $soft_black;
    border: none;

    &::placeholder {
      font-weight: normal;
    }
  }

  .user-label-container {
    width: 100%;

    .TextInput {
      padding: 0;

      .display, input {
        // @include text_monospace;
        padding: 4px;
        font-size: 20px;
        text-align: center;
        border: 2px solid $rust;
        border-radius: 0 0 6px 6px;

        &.placeholder {
          color: $grey_mid;
          border-color: $parchment_dark;
          &:hover { background-color: $parchment_mid; }
        }

        &.not-placeholder {
          color: white;
          background-color: $rust;
          &:hover { background-color: $rust_light; }
        }

      }
    }
  }

  .type-label {
    // @include text_monospace;
    color: $rust;
    font-size: 28px;
    text-align: center;
    margin-top: -6px;
    margin-bottom: 4px;
  }
}
